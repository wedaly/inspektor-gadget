// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64
// +build arm64

package tracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadTracepkt returns the embedded CollectionSpec for tracepkt.
func loadTracepkt() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TracepktBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tracepkt: %w", err)
	}

	return spec, err
}

// loadTracepktObjects loads tracepkt and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *tracepktObjects
//     *tracepktPrograms
//     *tracepktMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTracepktObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTracepkt()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tracepktSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tracepktSpecs struct {
	tracepktProgramSpecs
	tracepktMapSpecs
}

// tracepktSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tracepktProgramSpecs struct {
	KprobeNfLogTrace *ebpf.ProgramSpec `ebpf:"kprobe_nf_log_trace"`
}

// tracepktMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tracepktMapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
}

// tracepktObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTracepktObjects or ebpf.CollectionSpec.LoadAndAssign.
type tracepktObjects struct {
	tracepktPrograms
	tracepktMaps
}

func (o *tracepktObjects) Close() error {
	return _TracepktClose(
		&o.tracepktPrograms,
		&o.tracepktMaps,
	)
}

// tracepktMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTracepktObjects or ebpf.CollectionSpec.LoadAndAssign.
type tracepktMaps struct {
	Events *ebpf.Map `ebpf:"events"`
}

func (m *tracepktMaps) Close() error {
	return _TracepktClose(
		m.Events,
	)
}

// tracepktPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTracepktObjects or ebpf.CollectionSpec.LoadAndAssign.
type tracepktPrograms struct {
	KprobeNfLogTrace *ebpf.Program `ebpf:"kprobe_nf_log_trace"`
}

func (p *tracepktPrograms) Close() error {
	return _TracepktClose(
		p.KprobeNfLogTrace,
	)
}

func _TracepktClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed tracepkt_bpfel_arm64.o
var _TracepktBytes []byte
